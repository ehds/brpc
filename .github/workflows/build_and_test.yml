name: ci
on: [push, pull_request]

permissions:
  contents: read

env:
  BAZEL_VERSION: 0.25.1
  PREFIX: /usr/local
jobs:
  build-and-test:
    name:  >-
      CI
      ${{ matrix.compiler }}
      ${{ matrix.build_tool }}
      all_options:${{ matrix.all_options }}
      ${{ matrix.purpose }}
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]
        build_tool: [cmake, bazel, make]
        all_options: [true, false]
        purpose: [build, test]
        exclude:
          - all_options: true
            purpose: test
          - build_tool: bazel
            purpose: test
          - build_tool: cmake
            purpose: test
        include:
        - compiler: clang
          CC: clang
          CXX: clang++
        - compiler: gcc
          CC: gcc
          CXX: g++
          
    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/bld
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get install libgflags-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev libgoogle-perftools-dev libboost-dev libssl-dev libevent-dev libboost-test-dev libgoogle-glog-dev
        sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo env "PATH=$PATH" cmake . && sudo make && sudo mv libgtest* /usr/lib/ && cd -
        sudo apt-get install -y gdb
        sudo apt-get install automake bison flex g++ git libboost-all-dev libevent-dev libssl-dev libtool make pkg-config # thrift dependencies
    - if: ${{ runner.os == 'macOS' }}
      run: |
        brew install openssl git gnu-getopt coreutils gflags protobuf leveldb googletest glog gperftools
        brew install bison@2.7 flex boost libevent
        echo "/usr/local/opt/bison@2.7/bin" >> $GITHUB_PATH
        echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
        echo "/usr/local/opt/openssl@3/bin"  >> $GITHUB_PATH
        echo "/usr/local/opt/gnu-getopt/bin"  >> $GITHUB_PATH
        sudo ln -s /usr/local/opt/openssl@3/ /usr/local/opt/openssl/
        echo 'export LIBRARY_PATH="/usr/local/lib/:/usr/local/opt/lib:/opt/homebrew/lib/:/usr/local/opt/openssl/lib:$LIBRARY_PATH"'  >> /Users/runner/.bash_profile
        echo 'export CPATH="usr/local/include/:/usr/local/opt/include:/opt/homebrew/include/:/usr/local/opt/openssl/include:$LIBRARY_PATH"'  >> /Users/runner/.bash_profile

    - name: Install Thrift
      run: |
        export OPENSSL_ROOT_DIR="/usr/local/opt/openssl@3/"
        curl -fLO https://archive.apache.org/dist/thrift/0.11.0/thrift-0.11.0.tar.gz
        tar -xf thrift-0.11.0.tar.gz && cd thrift-0.11.0/
        mkdir bld && cd bld && cmake .. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=$PREFIX -DBUILD_C_GLIB=OFF -DBUILD_JAVA=OFF -DBUILD_PYTHON=OFF -DBUILD_HASKELL=OFF -DCMAKE_CXX_FLAGS="-Wno-implicit-function-declaration -Wno-unused-variable" -DCMAKE_C_FLAGS="-Wno-implicit-function-declaration" && make -j5
        sudo make install
    - name: Install bazel
      if: ${{ matrix.build_tool == 'bazel'}}
      run: |
          pwd
          curl -fLO "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-`uname`-x86_64.sh"
          chmod +x "bazel-${BAZEL_VERSION}-installer-`uname`-x86_64.sh"
          ./bazel-${BAZEL_VERSION}-installer-`uname`-x86_64.sh --user
          echo "$HOME/bin" >> $GITHUB_PATH
    - name: Build BRPC with cmake
      if: ${{ matrix.build_tool == 'cmake' && !matrix.all_options}}
      run: |
        cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -DCMAKE_CXX_FLAGS="-L/opt/homebrew/lib -L${PREFIX}/lib"
        make -j4 -C ${{ env.CMAKE_BUILD_DIR }}
    - name: Build BRPC with cmake
      if: ${{ matrix.build_tool == 'cmake' && matrix.all_options}}
      run: |
        cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -DWITH_MESALINK=OFF -DWITH_GLOG=ON -DWITH_THRIFT=ON -DCMAKE_CXX_FLAGS="-L/opt/homebrew/lib -L${PREFIX}/lib"
        make -j4 -C ${{ env.CMAKE_BUILD_DIR }}
    - name: Build BRPC with bazel
      if: ${{ matrix.build_tool == 'bazel'  && !matrix.all_options}}
      run: |
        bazel build -j 12 -c opt --copt -DHAVE_ZLIB=1 //...
    - name: Build BRPC with bazel
      if: ${{ matrix.build_tool == 'bazel'  && matrix.all_options}}
      run: |
        bazel build -j 12 -c opt --define with_mesalink=false --define with_glog=true --define with_thrift=true --copt -DHAVE_ZLIB=1 //...
    - name: Build BRPC with make
      if: ${{ matrix.build_tool == 'make'  && !matrix.all_options}}
      run: |
       sh config_brpc.sh --headers=$PREFIX/include --libs=$PREFIX/lib --nodebugsymbols --cxx=$CXX --cc=$CC --with-thrift
       make -j4
       sh tools/make_all_examples

    - name: Build BRPC with make
      if: ${{ matrix.build_tool == 'make'  && matrix.all_options}}
      run: |
       sh config_brpc.sh --headers=$PREFIX/include --libs=$PREFIX/lib --nodebugsymbols --cxx=$CXX --cc=$CC --with-thrift --with-glog
       make -j4

    - name: Run Tests
      if: ${{ matrix.purpose == 'test' }}
      id: test-brpc
      working-directory: ${{ github.workspace }}/test
      run: |
        make -j4
        ulimit -c unlimited -S
        sudo bash -c "echo 'core.%e.%p' > /proc/sys/kernel/core_pattern"
        sh ./run_tests.sh
    - name: Collect failure info
      if: ${{ steps.test-brpc.conclusion == 'failure'}}
      run: |
        COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1)
        gdb -c "$COREFILE" test -ex "thread apply all bt" -ex "set pagination 0" -batch
